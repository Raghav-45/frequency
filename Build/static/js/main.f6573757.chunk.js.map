{"version":3,"sources":["utils/init-firebase.js","contexts/AuthContext.js","components/Card.jsx","components/DividerWithText.jsx","components/Navlink.jsx","components/Navbar.jsx","components/Layout.jsx","pages/ForgotPasswordPage.jsx","pages/Homepage.jsx","components/ProviderIcons.js","components/PasswordField.js","pages/Loginpage.jsx","hooks/useMounted.js","pages/NotfoundPage.jsx","pages/Profilepage.jsx","pages/Registerpage.jsx","pages/ResetPasswordPage.jsx","pages/TestPage.jsx","pages/Chatpage.jsx","pages/RTDBpage.jsx","components/AppRouter.jsx","App.jsx","index.jsx"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","db","getFirestore","AuthContext","createContext","currentUser","signInWithGoogle","Promise","login","register","logout","forgotPassword","resetPassword","useAuth","useContext","AuthContextProvider","children","useState","setCurrentUser","useEffect","unsubscribe","onAuthStateChanged","user","console","log","value","provider","GoogleAuthProvider","addScope","signInWithPopup","email","password","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","sendPasswordResetEmail","url","oobCode","newPassword","confirmPasswordReset","Provider","Card","props","bg","useColorModeValue","py","px","base","md","shadow","rounded","sm","DividerWithText","flexProps","align","color","flex","borderColor","as","fontWeight","Navlink","to","name","rest","isActive","useLocation","pathname","variant","colorScheme","Navbar","toggleColorMode","useColorMode","borderBottom","borderBottomColor","mb","justifyContent","maxW","mx","spacing","size","onClick","e","a","preventDefault","icon","Layout","ForgotPasswordPage","history","useHistory","toast","useToast","setEmail","textAlign","my","mt","form","onSubmit","description","status","duration","isClosable","message","id","type","autoComplete","required","onChange","target","fontSize","push","Homepage","GoogleIcon","createIcon","displayName","path","transform","fill","d","GitHubIcon","TwitterIcon","PasswordField","React","ref","useDisclosure","isOpen","onToggle","inputRef","mergeRef","useMergeRefs","htmlFor","current","focus","preventScroll","Loginpage","location","mounted","useRef","useMounted","isSubmitting","setIsSubmitting","setPassword","iconProviders","boxSize","handleRedirectToOrBack","replace","state","from","useBreakpointValue","justify","boxShadow","borderRadius","then","res","catch","error","finally","defaultChecked","isLoading","whiteSpace","width","NotfoundPage","Profilepage","overflowX","pre","p","JSON","stringify","Registerpage","setDoc","doc","uid","Email","PhotoURL","photoURL","Username","isFullWidth","leftIcon","ResetPasswordPage","query","URLSearchParams","search","get","TestPage","Chatpage","MessageTo","setMessageTo","Message","setMessage","MessageTo_Username","setMessageTo_Username","date","Date","UserDetails","setUserDetails","Loader","setLoader","useBoolean","ShowDMList","q","collection","onSnapshot","querySnapshot","cities","forEach","data","getData","src","noOfLines","map","elem","orientation","display","overflow","_hover","_active","ml","addDoc","From","To","CreatedAt","getTime","placeholder","Msgg","setMsgg","where","q2","sort","b","alignItems","AppRouter","exact","component","ProtectedRoute","RTDBpage","App","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6573757.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBNBgMI2_ZowUv7kLO5X5BEKK9u56GknpE\",\n  authDomain: \"frequency-55b5a.firebaseapp.com\",\n  projectId: \"frequency-55b5a\",\n  storageBucket: \"frequency-55b5a.appspot.com\",\n  messagingSenderId: \"51706311986\",\n  appId: \"1:51706311986:web:b0a4aca219ef4ebb97132b\",\n}\n\nconst app = initializeApp(firebaseConfig)\nconst auth = getAuth(app)\nconst db = getFirestore(app)\n\nexport { auth, db }\n","import React, { createContext, useContext, useEffect, useState } from 'react'\nimport { auth } from '../utils/init-firebase'\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  sendPasswordResetEmail,\n  onAuthStateChanged,\n  signInWithPopup,\n  GoogleAuthProvider,\n  signOut,\n  confirmPasswordReset,\n} from 'firebase/auth'\n\nconst AuthContext = createContext({\n  currentUser: null,\n  signInWithGoogle: () => Promise,\n  login: () => Promise,\n  register: () => Promise,\n  logout: () => Promise,\n  forgotPassword: () => Promise,\n  resetPassword: () => Promise,\n})\n\nexport const useAuth = () => useContext(AuthContext)\n\nexport default function AuthContextProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null)\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setCurrentUser(user ? user : null)\n    })\n    return () => {\n      unsubscribe()\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log('The user is', currentUser)\n  }, [currentUser])\n\n  function login(email, password) {\n    return signInWithEmailAndPassword(auth, email, password)\n  }\n\n  function register(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password)\n  }\n\n  function forgotPassword(email) {\n    return sendPasswordResetEmail(auth, email, {\n      url: `http://localhost:3000/login`,\n    })\n  }\n\n  function resetPassword(oobCode, newPassword) {\n    return confirmPasswordReset(auth, oobCode, newPassword)\n  }\n\n  function logout() {\n    return signOut(auth)\n  }\n\n  function signInWithGoogle() {\n    const provider = new GoogleAuthProvider()\n    provider.addScope('https://www.googleapis.com/auth/contacts.readonly')\n    return signInWithPopup(auth, provider)\n  }\n\n  const value = {\n    currentUser,\n    signInWithGoogle,\n    login,\n    register,\n    logout,\n    forgotPassword,\n    resetPassword,\n  }\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n","import { Box, useColorModeValue } from '@chakra-ui/react'\nimport * as React from 'react'\n\nexport const Card = props => (\n  <Box\n    bg={useColorModeValue('white', 'gray.700')}\n    py='8'\n    px={{ base: '4', md: '10' }}\n    shadow='base'\n    rounded={{ sm: 'lg' }}\n    {...props}\n  />\n)\n","import { Flex, Box, Divider, useColorModeValue, Text } from '@chakra-ui/react'\nimport React from 'react'\n\nexport default function DividerWithText(props) {\n  const { children, ...flexProps } = props\n  return (\n    <Flex align='center' color='gray.300' {...flexProps}>\n      <Box flex='1'>\n        <Divider borderColor='currentcolor' />\n      </Box>\n      <Text\n        as='span'\n        px='3'\n        color={useColorModeValue('gray.600', 'gray.400')}\n        fontWeight='medium'\n      >\n        {children}\n      </Text>\n      <Box flex='1'>\n        <Divider borderColor='currentcolor' />\n      </Box>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { NavLink as Link, useLocation } from 'react-router-dom'\nimport { Button } from '@chakra-ui/react'\n\nexport default function Navlink({ to, name, ...rest }) {\n  const location = useLocation()\n\n  const isActive = location.pathname === to\n\n  return (\n    <Link to={to}>\n      <Button\n        variant={isActive ? 'outline' : 'ghost'}\n        colorScheme={isActive ? 'blue' : ''}\n        {...rest}\n      >\n        {name}\n      </Button>\n    </Link>\n  )\n}\n","import {\n  Box,\n  HStack,\n  IconButton,\n  Spacer,\n  useColorMode,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\nimport { useAuth } from '../contexts/AuthContext'\nimport Navlink from './Navlink'\n\nexport function Navbar() {\n  const { toggleColorMode } = useColorMode()\n  // const { logout, currentUser } = useAuth()\n  const { logout, currentUser } = useAuth()\n\n  return (\n    <Box\n      borderBottom='2px'\n      borderBottomColor={useColorModeValue('gray.100', 'gray.700')}\n      mb={4}\n      py={4}\n    >\n      <HStack\n        justifyContent='flex-end'\n        maxW='container.lg'\n        mx='auto'\n        spacing={4}\n      >\n        <Navlink to='/' name='Frequency' size='lg' />\n        <Spacer />\n        {!currentUser && <Navlink to='/login' name='Login' />}\n        {!currentUser && <Navlink to='/register' name='Register' />}\n        {currentUser && <Navlink to='/profile' name='Profile' />}\n        {currentUser && <Navlink to='/Chat' name='Chat' />}\n        {currentUser && <Navlink to='/RTDB' name='RealTimeDB' />}\n        {currentUser && (\n          <Navlink\n            to='/logout'\n            name='Logout'\n            onClick={async e => {\n              e.preventDefault()\n              await logout()\n            }}\n          />\n        )}\n        <IconButton\n          variant='ghost'\n          icon={useColorModeValue(<FaSun />, <FaMoon />)}\n          onClick={toggleColorMode}\n          aria-label='toggle-dark-mode'\n        />\n      </HStack>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { Box, Container } from '@chakra-ui/react'\nimport { Navbar } from './Navbar'\n\nexport function Layout({ children }) {\n  return (\n    <Box mb={16}>\n      <Navbar />\n      <Container maxW='container.lg'>{children}</Container>\n    </Box>\n  )\n}\n","import {\n  Button,\n  Center,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport default function ForgotPasswordPage() {\n  const history = useHistory()\n  const { forgotPassword } = useAuth()\n  const toast = useToast()\n\n  const [email, setEmail] = useState('')\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Forgot password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            // your login logic here\n            try {\n              await forgotPassword(email)\n              toast({\n                description: `An email is sent to ${email} for password reset instructions.`,\n                status: 'success',\n                duration: 9000,\n                isClosable: true,\n              })\n            } catch (error) {\n              console.log(error.message)\n              toast({\n                description: error.message,\n                status: 'error',\n                duration: 9000,\n                isClosable: true,\n              })\n            }\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input\n                name='email'\n                type='email'\n                autoComplete='email'\n                required\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n              />\n            </FormControl>\n            <Button type='submit' colorScheme='pink' size='lg' fontSize='md'>\n              Submit\n            </Button>\n          </Stack>\n        </chakra.form>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Center>\n          <Button variant='link' onClick={() => history.push('/login')}>\n            Login\n          </Button>\n        </Center>\n      </Card>\n    </Layout>\n  )\n}\n","import {\n  Badge,\n  chakra,\n  Code,\n  Heading,\n  List,\n  ListItem,\n  OrderedList,\n} from '@chakra-ui/react'\nimport React from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport default function Homepage() {\n  return (\n    <Layout>\n      {/* <Heading>Home page</Heading> */}\n      {/* <Text my={6}>{currentUser?.email}</Text> */}\n\n      {/* <Heading>\n        Firebase Authentication\n        <chakra.span\n          fontWeight='black'\n          fontStyle='italic'\n          fontSize='9xl'\n          mx={2}\n        >\n          v9\n        </chakra.span>\n        <Badge\n          fontWeight='black'\n          fontSize='4xl'\n          mx={2}\n          px={2}\n          colorScheme='green'\n        >\n          NEW API\n        </Badge>\n      </Heading> */}\n      {/* <OrderedList fontSize='3xl' my={4}>\n        <ListItem>Email password authentication (Register/Login)</ListItem>\n        <ListItem>Google Sign in</ListItem>\n        <ListItem>Forgot Password</ListItem>\n        <ListItem>Custom Reset password page</ListItem>\n        <ListItem>Protected routes</ListItem>\n        <ListItem>\n          <Code fontSize='inherit'> Redirect TO</Code> or Back (keeping the\n          state)\n        </ListItem>\n        <ListItem>\n          custom Auth Hook <Code fontSize='3xl'>useAuth()</Code>\n        </ListItem>\n        <ListItem>Loading indicators while sign-in/up</ListItem>\n        <ListItem>\n          Dark Mode enabled template using\n          <Badge\n            fontSize='inherit'\n            colorScheme='teal'\n            mx={2}\n            textTransform='capitalize'\n            borderRadius='md'\n          >\n            Chakra UI\n          </Badge>\n        </ListItem>\n      </OrderedList> */}\n      {/* <Heading size='md' mt={8}>\n        Some other links (only for reference):\n      </Heading>\n      <List>\n        <ListItem>\n          <Link to='/reset-password'>reset page</Link>\n        </ListItem>\n        <ListItem>\n          <Link to='/forgot-password'>forgot page</Link>\n        </ListItem>\n        <ListItem>\n          <Link to='/test'>test page</Link>\n        </ListItem>\n      </List> */}\n    </Layout>\n  )\n}\n","import { createIcon } from '@chakra-ui/react'\n\nexport const GoogleIcon = createIcon({\n  displayName: 'GoogleIcon',\n  path: (\n    <g transform=\"matrix(1, 0, 0, 1, 27.009001, -39.238998)\">\n      <path\n        fill=\"#4285F4\"\n        d=\"M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.284 53.749 C -8.574 55.229 -9.424 56.479 -10.684 57.329 L -10.684 60.329 L -6.824 60.329 C -4.564 58.239 -3.264 55.159 -3.264 51.509 Z\"\n      />\n      <path\n        fill=\"#34A853\"\n        d=\"M -14.754 63.239 C -11.514 63.239 -8.804 62.159 -6.824 60.329 L -10.684 57.329 C -11.764 58.049 -13.134 58.489 -14.754 58.489 C -17.884 58.489 -20.534 56.379 -21.484 53.529 L -25.464 53.529 L -25.464 56.619 C -23.494 60.539 -19.444 63.239 -14.754 63.239 Z\"\n      />\n      <path\n        fill=\"#FBBC05\"\n        d=\"M -21.484 53.529 C -21.734 52.809 -21.864 52.039 -21.864 51.239 C -21.864 50.439 -21.724 49.669 -21.484 48.949 L -21.484 45.859 L -25.464 45.859 C -26.284 47.479 -26.754 49.299 -26.754 51.239 C -26.754 53.179 -26.284 54.999 -25.464 56.619 L -21.484 53.529 Z\"\n      />\n      <path\n        fill=\"#EA4335\"\n        d=\"M -14.754 43.989 C -12.984 43.989 -11.404 44.599 -10.154 45.789 L -6.734 42.369 C -8.804 40.429 -11.514 39.239 -14.754 39.239 C -19.444 39.239 -23.494 41.939 -25.464 45.859 L -21.484 48.949 C -20.534 46.099 -17.884 43.989 -14.754 43.989 Z\"\n      />\n    </g>\n  ),\n})\nexport const GitHubIcon = createIcon({\n  displayName: 'GitHubIcon',\n  path: (\n    <path\n      fill=\"currentColor\"\n      d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"\n    />\n  ),\n})\nexport const TwitterIcon = createIcon({\n  displayName: 'TwitterIcon',\n  path: (\n    <path\n      fill=\"#03A9F4\"\n      d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n    />\n  ),\n})","import {\n  FormControl,\n  FormLabel,\n  IconButton,\n  Input,\n  InputGroup,\n  InputRightElement,\n  useDisclosure,\n  useMergeRefs,\n} from '@chakra-ui/react'\nimport * as React from 'react'\nimport { HiEye, HiEyeOff } from 'react-icons/hi'\n\nexport const PasswordField = React.forwardRef((props, ref) => {\n  const { isOpen, onToggle } = useDisclosure()\n  const inputRef = React.useRef(null)\n  const mergeRef = useMergeRefs(inputRef, ref)\n\n  const onClickReveal = () => {\n    onToggle()\n\n    if (inputRef.current) {\n      inputRef.current.focus({\n        preventScroll: true,\n      })\n    }\n  }\n\n  return (\n    <FormControl>\n      <FormLabel htmlFor=\"password\">Password</FormLabel>\n      <InputGroup>\n        <InputRightElement>\n          <IconButton\n            variant=\"link\"\n            aria-label={isOpen ? 'Mask password' : 'Reveal password'}\n            icon={isOpen ? <HiEyeOff /> : <HiEye />}\n            onClick={onClickReveal}\n          />\n        </InputRightElement>\n        <Input\n          id=\"password\"\n          ref={mergeRef}\n          name=\"password\"\n          type={isOpen ? 'text' : 'password'}\n          autoComplete=\"current-password\"\n          required\n          {...props}\n        />\n      </InputGroup>\n    </FormControl>\n  )\n})\nPasswordField.displayName = 'PasswordField'","import React, { useState } from 'react'\nimport {\n  chakra,\n  Box,\n  Button,\n  Checkbox,\n  Container,\n  Divider,\n  FormControl,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Stack,\n  useToast,\n  Text,\n  useBreakpointValue,\n  useColorModeValue,\n  ButtonGroup,\n} from '@chakra-ui/react'\nimport { VisuallyHidden } from '@chakra-ui/react'\nimport { GitHubIcon, GoogleIcon, TwitterIcon } from '../components/ProviderIcons'\nimport { Layout } from '../components/Layout'\nimport { Link, useHistory, useLocation } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport useMounted from '../hooks/useMounted'\n// import { OAuthButton } from '../components/OAuthButtonGroup'\nimport { PasswordField } from '../components/PasswordField'\n\nexport default function Loginpage() {\n  const { signInWithGoogle, login } = useAuth()\n  const history = useHistory()\n  const location = useLocation()\n  const mounted = useMounted()\n  const toast = useToast()\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const iconProviders = [\n    {\n      name: 'Google',\n      icon: <GoogleIcon boxSize=\"5\" />,\n    },\n    {\n      name: 'Twitter',\n      icon: <TwitterIcon boxSize=\"5\" />,\n    },\n    {\n      name: 'GitHub',\n      icon: <GitHubIcon boxSize=\"5\" />,\n    },\n  ]\n\n  function handleRedirectToOrBack() {\n    history.replace(location.state?.from ?? '/profile')\n  }\n\n  return (\n    <Layout>\n      <Container maxW=\"lg\" py={{ base: '12', md: '24' }} px={{ base: '0', sm: '8' }}>\n        <Stack spacing=\"8\">\n          <Stack spacing=\"6\">\n            {/* <Logo /> */}\n            <Stack\n              spacing={{\n                base: '2',\n                md: '3',\n              }}\n              textAlign=\"center\"\n            >\n              <Heading\n                size={useBreakpointValue({\n                  base: 'xs',\n                  md: 'xl',\n                })}\n              >\n                Log in to your account\n              </Heading>\n              <HStack spacing=\"1\" justify=\"center\">\n                <Text color=\"muted\">Don't have an account?</Text>\n                <Button variant=\"link\" colorScheme=\"blue\" onClick={() => history.push('/register')}>\n                  <Link to='/register'>\n                    Sign up\n                  </Link>\n                </Button>\n              </HStack>\n            </Stack>\n          </Stack>\n          <Box\n            py={{\n              base: '0',\n              sm: '8',\n            }}\n            px={{\n              base: '4',\n              sm: '10',\n            }}\n            bg={useBreakpointValue({\n              base: 'transparent',\n              sm: 'bg-surface',\n            })}\n            boxShadow={{\n              base: 'none',\n              sm: useColorModeValue('md', 'md-dark'),\n            }}\n            borderRadius={{\n              base: 'none',\n              sm: 'xl',\n            }}\n          >\n            <chakra.form\n              onSubmit={async e => {\n                e.preventDefault()\n                if (!email || !password) {\n                  toast({\n                    description: 'Credentials not valid.',\n                    status: 'error',\n                    duration: 9000,\n                    isClosable: true,\n                  })\n                  return\n                }\n                // your login logic here\n                setIsSubmitting(true)\n                login(email, password)\n                  .then(res => {\n                    handleRedirectToOrBack()\n                  })\n                  .catch(error => {\n                    console.log(error.message)\n                    toast({\n                      description: error.message,\n                      status: 'error',\n                      duration: 9000,\n                      isClosable: true,\n                    })\n                  })\n                  .finally(() => {\n                    // setTimeout(() => {\n                    //   mounted.current && setIsSubmitting(false)\n                    //   console.log(mounted.current)\n                    // }, 1000)\n                    mounted.current && setIsSubmitting(false)\n                  })\n              }}\n            >\n              <Stack spacing=\"6\">\n                <Stack spacing=\"5\">\n                  <FormControl>\n                    <FormLabel htmlFor=\"email\">Email</FormLabel>\n                    <Input\n                      id=\"email\"\n                      type='email'\n                      autoComplete='email'\n                      required\n                      value={email}\n                      onChange={e => setEmail(e.target.value)}\n                    />\n                  </FormControl>\n                  <PasswordField\n                    name='password'\n                    autoComplete='password'\n                    value={password}\n                    required\n                    onChange={e => setPassword(e.target.value)}\n                  />\n                </Stack>\n                <HStack justify=\"space-between\">\n                  <Checkbox defaultChecked>Remember me</Checkbox>\n                  <Button variant=\"link\" to='google.com' colorScheme=\"blue\" size=\"sm\">\n                    <Link to='/forgot-password'>\n                      Forgot password?\n                    </Link>\n                  </Button>\n                </HStack>\n                <Stack spacing=\"6\">\n                  <Button\n                    type='submit'\n                    colorScheme='blue'\n                    size='lg'\n                    fontSize='md'\n                    isLoading={isSubmitting}\n                  >\n                    Sign in\n                  </Button>\n                  <HStack>\n                    <Divider />\n                    <Text fontSize=\"sm\" whiteSpace=\"nowrap\" color=\"muted\">\n                      or continue with\n                    </Text>\n                    <Divider />\n                  </HStack>\n                  <ButtonGroup variant=\"outline\" spacing=\"4\" width=\"full\">\n                    <Button key='Google' width=\"full\"\n                      onClick={() =>\n                        signInWithGoogle()\n                          .then(user => {\n                            handleRedirectToOrBack()\n                            console.log(user)\n                          })\n                          .catch(e => console.log(e.message))\n                      }\n                    >\n                      <VisuallyHidden>Sign in with 'Google'</VisuallyHidden>\n                      {iconProviders[0].icon}\n                    </Button>\n                    <Button key='Twitter' width=\"full\"\n\n                    >\n                      <VisuallyHidden>Sign in with 'Twitter'</VisuallyHidden>\n                      {iconProviders[1].icon}\n                    </Button>\n                    <Button key='Github' width=\"full\"\n\n                    >\n                      <VisuallyHidden>Sign in with 'Github'</VisuallyHidden>\n                      {iconProviders[2].icon}\n                    </Button>\n                  </ButtonGroup>\n                </Stack>\n              </Stack>\n            </chakra.form>\n          </Box>\n        </Stack>\n      </Container>\n    </Layout>\n  )\n}","import { useEffect, useRef } from 'react'\n\nexport default function useMounted() {\n  const mounted = useRef(false)\n  useEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n","import { Heading } from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\n\nexport default function NotfoundPage() {\n  return (\n    <Layout>\n      <Heading>Not found page</Heading>\n    </Layout>\n  )\n}\n","import { chakra, Container, Heading } from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\n\nexport default function Profilepage() {\n  const { currentUser } = useAuth()\n  return (\n    <Layout>\n      <Heading>Profile page</Heading>\n      <Container maxW='container.lg' overflowX='auto' py={4}>\n        <chakra.pre p={4}>\n          {currentUser && <pre> {JSON.stringify(currentUser, null, 2)}</pre>}\n        </chakra.pre>\n      </Container>\n    </Layout>\n  )\n}\n","import {\n  Button,\n  Center,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FaGoogle } from 'react-icons/fa'\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '../components/Card'\nimport DividerWithText from '../components/DividerWithText'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\nimport { db } from '../utils/init-firebase'\nimport { doc, setDoc } from 'firebase/firestore'\n\nexport default function Registerpage() {\n  const history = useHistory()\n  const { signInWithGoogle, register } = useAuth()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const toast = useToast()\n  const mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Register\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            if (!email || !password) {\n              toast({\n                description: 'Credentials not valid.',\n                status: 'error',\n                duration: 9000,\n                isClosable: true,\n              })\n              return\n            }\n            // your register logic here\n            setIsSubmitting(true)\n            register(email, password)\n              .then(res => {\n                setDoc(doc(db, \"UserDetails\", res.user.uid), {\n                  Email: res.user.email,\n                  PhotoURL: res.user.photoURL,\n                  Username: res.user.email,\n                  uid: res.user.uid\n                })\n              })\n              .catch(error => {\n                console.log(error.message)\n                toast({\n                  description: error.message,\n                  status: 'error',\n                  duration: 9000,\n                  isClosable: true,\n                })\n              })\n              .finally(() => {\n                mounted.current && setIsSubmitting(false)\n              })\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='email'>\n              <FormLabel>Email address</FormLabel>\n              <Input\n                name='email'\n                type='email'\n                autoComplete='email'\n                required\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n              />\n            </FormControl>\n            <FormControl id='password'>\n              <FormLabel>Password</FormLabel>\n              <Input\n                name='password'\n                type='password'\n                autoComplete='password'\n                required\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              />\n            </FormControl>\n            <Button\n              type='submit'\n              colorScheme='blue'\n              size='lg'\n              fontSize='md'\n              isLoading={isSubmitting}\n            >\n              Sign up\n            </Button>\n          </Stack>\n        </chakra.form>\n        <Center my={4}>\n          <Button variant='link' onClick={() => history.push('/login')}>\n            Login\n          </Button>\n        </Center>\n        <DividerWithText my={6}>OR</DividerWithText>\n        <Button\n          variant='outline'\n          isFullWidth\n          colorScheme='red'\n          leftIcon={<FaGoogle />}\n          onClick={() =>\n            signInWithGoogle()\n              .then(user => console.log(user))\n              .catch(e => console.log(e.message))\n          }\n        >\n          Sign in with Google\n        </Button>\n      </Card>\n    </Layout>\n  )\n}\n","import {\n  Button,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { Card } from '../components/Card'\nimport { Layout } from '../components/Layout'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default function ResetPasswordPage() {\n  const { resetPassword } = useAuth()\n  const query = useQuery()\n  const history = useHistory()\n  const [password, setPassword] = useState('')\n  const toast = useToast()\n\n  console.log(query.get('mode'), query.get('oobCode'))\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Reset password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            try {\n              await resetPassword(query.get('oobCode'), password)\n              toast({\n                description: 'Password has been changed, you can login now.',\n                status: 'success',\n                duration: 9000,\n                isClosable: true,\n              })\n              history.push('/login')\n            } catch (error) {\n              toast({\n                description: error.message,\n                status: 'error',\n                duration: 9000,\n                isClosable: true,\n              })\n              console.log(error.message)\n            }\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='password'>\n              <FormLabel>New password</FormLabel>\n              <Input\n                type='password'\n                autoComplete='password'\n                required\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              />\n            </FormControl>\n            <Button type='submit' colorScheme='pink' size='lg' fontSize='md'>\n              Reset password\n            </Button>\n          </Stack>\n        </chakra.form>\n      </Card>\n    </Layout>\n  )\n}\n","import { Container, Heading, Text } from '@chakra-ui/react'\nimport React from 'react'\nimport { Layout } from '../components/Layout'\n\nexport default function TestPage() {\n  return (\n    <Layout>\n      <Heading>Test page</Heading>\n      <Container maxW='container.lg' py={4}>\n        <Text>Only for showing how redirects work, i.e. redict to or back</Text>\n      </Container>\n    </Layout>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Layout } from '../components/Layout'\nimport { Card } from '../components/Card'\nimport { useAuth } from '../contexts/AuthContext'\nimport { onSnapshot, collection, query, addDoc } from 'firebase/firestore'\nimport { db } from '../utils/init-firebase'\n\nimport {\n  Center,\n  useBoolean,\n  Avatar,\n  AvatarBadge,\n  Wrap,\n  WrapItem,\n  chakra,\n  Container,\n  Heading,\n  Divider,\n  Text,\n  Button,\n  FormControl,\n  HStack,\n  VStack,\n  Input,\n  FormLabel,\n  useToast,\n  Box,\n  Flex,\n  Badge\n} from '@chakra-ui/react'\n\nexport default function Chatpage() {\n  const [MessageTo, setMessageTo] = useState('')\n  const [Message, setMessage] = useState('')\n  const [MessageTo_Username, setMessageTo_Username] = useState('')\n\n  const toast = useToast()\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const { currentUser } = useAuth()\n\n  const date = new Date()\n\n  const [UserDetails, setUserDetails] = useState([])\n  const [Loader, setLoader] = useState(true)\n\n  const [ShowDMList, setShowDMList] = useBoolean()\n\n  function getData() {\n    // const q = query(collection(db, \"ConceptCollection\"), where(\"To\", \"==\", \"raghav\"), orderBy(\"CreatedAt\"))\n    const q = query(collection(db, \"UserDetails\"))\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const cities = [];\n      querySnapshot.forEach((doc) => {\n        // cities.push(doc.data().Message);\n        cities.push(doc.data());\n      })\n      setUserDetails(cities)\n      setLoader(false)\n      // console.log(\"Data Array: \", Msgg)\n    })\n  }\n  useEffect(() => {\n    getData()\n  }, [])\n\n  return (\n    <Layout>\n      <Heading>Chat Page</Heading>\n      <Container maxW=\"container.lg\" overflowX=\"auto\" py={4}>\n        <Wrap>\n          <WrapItem>\n            <VStack>\n              <Avatar onClick={() => toast({description: \"Search Button [Work in Progress]\", status: \"error\", duration: 1000})} src=\"http://broken-link\">\n              </Avatar>\n              <Text mt='0.25rem !important' noOfLines={1} textAlign=\"Center\" width=\"100px\">Search</Text>\n            </VStack>\n            {Loader === false && UserDetails.map((elem) => \n              // <WrapItem>\n            <VStack>\n              <Avatar onClick={() => setMessageTo(elem.uid)} src={elem.PhotoURL}>\n                <AvatarBadge boxSize='1.25em' bg='tomato' />\n              </Avatar>\n              <Text mt='0.25rem !important' noOfLines={1} textAlign=\"Center\" width=\"100px\">{elem.Username}</Text>\n            </VStack>\n          )}\n          </WrapItem>\n        </Wrap>\n        <Divider orientation='horizontal' mt={2} mb={5} />\n\n        {Loader === false && <Box display={ShowDMList} id='Inbox' borderRadius={17} overflow='hidden'>{\n        UserDetails.map((elem) =>\n          <Flex p={2} bg='gray.50' _hover={{bg: 'gray.200'}} _active={{bg: 'gray.200'}} onClick={() => {setMessageTo(elem.uid); setMessageTo_Username(elem.Username);}}>\n          <Avatar src={elem.PhotoURL}><AvatarBadge boxSize='1.05em' bg='green.400' /></Avatar>\n          <Box ml='3'>\n            <Text white-space='nowrap' overflow='hidden' text-overflow='ellipsis' fontWeight='bold'>{elem.Username}</Text>\n            <Text fontSize='sm'>UI Engineer</Text>\n          </Box>\n          </Flex>\n        )}</Box>}\n\n        <Card maxW=\"container.lg\" mx=\"auto\" mt={40}>\n          <FormLabel>{MessageTo_Username}</FormLabel>\n          <chakra.form\n            onSubmit={async (e) => {\n              e.preventDefault();\n              if (!Message) {\n                toast({\n                  description: \"Can't Send Empty Message.\",\n                  status: \"error\",\n                  duration: 1000,\n                  // isClosable: true,\n                });\n                return;\n              }\n\n              // your Message Sending logic here\n              setIsSubmitting(true);\n              await addDoc(collection(db, \"ConceptCollection\"), {\n                From: currentUser.uid,\n                To: MessageTo,\n                Message: Message,\n                // CreatedAt: Timestamp.fromDate(new Date(date.getTime())),\n                CreatedAt: date.getTime()\n              }).finally(() => {\n                setIsSubmitting(false);\n              });\n            }}\n          >\n            <HStack spacing=\"2\">\n              <FormControl id=\"Message\" size=\"md\" fontSize=\"md\">\n                {/* <FormLabel>Email address</FormLabel> */}\n                <Input\n                  name=\"Message\"\n                  placeholder=\"Message\"\n                  type=\"text\"\n                  // required\n                  value={Message}\n                  onChange={(e) => setMessage(e.target.value)}\n                />\n              </FormControl>\n              <Button\n                type=\"submit\"\n                colorScheme=\"blue\"\n                size=\"md\"\n                fontSize=\"md\"\n                isLoading={isSubmitting}\n              >\n                Send\n              </Button>\n            </HStack>\n          </chakra.form>\n        </Card>\n        {/* <chakra.pre p={4}>\n          {currentUser && <pre> {JSON.stringify(currentUser, null, 2)}</pre>}\n        </chakra.pre> */}\n      </Container>\n    </Layout>\n  );\n}\n","import React, { useState, useEffect } from 'react'\nimport { Card } from '../components/Card'\nimport { Layout } from '../components/Layout'\nimport { useAuth } from '../contexts/AuthContext'\nimport { doc, getDoc, collection, query, where, orderBy, onSnapshot } from 'firebase/firestore'\nimport { db } from '../utils/init-firebase'\n\nimport { Badge, Flex, Avatar, Box, Text } from '@chakra-ui/react'\n\nimport {\n  Container,\n  Heading,\n  Code\n} from '@chakra-ui/react'\nimport { async } from '@firebase/util'\n\nexport default function Chatpage() {\n  const { currentUser } = useAuth()\n\n  const [Msgg, setMsgg] = useState([])\n  const [Loader, setLoader] = useState(true)\n\n  function getData() {\n    const q1 = query(collection(db, \"ConceptCollection\"), where(\"To\", \"==\", currentUser.uid))\n    const q2 = query(collection(db, \"ConceptCollection\"), where('From', 'in', ['5JiyEv9ZwQfqh3Y6BVH7EtAufaN2', 'jvhBIAQ1CoaAgZsILrQcArbfDjo2']))\n    const unsubscribe = onSnapshot(q2, (querySnapshot) => {\n      const cities = [];\n      querySnapshot.forEach((doc) => {\n        cities.push(doc.data());\n      })\n      setMsgg(cities)\n      // console.log(cities)\n      setLoader(false)\n    })\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  function SortArray(a) {\n    a.sort(function(a, b){return a.CreatedAt - b.CreatedAt})\n    return a\n  }\n\n  function Dd(a1, a2) {\n    Array.prototype.diff = function(a) {\n      return this.filter(function(i) {return a.indexOf(i) < 0;})\n    };\n    const diff1 = a1.diff( a2 )\n    console.log(\"Difference Between Given Arrays: \", diff1)\n  }\n\n  return (\n    <Layout>\n      <Heading>RealTime DataBase Update Page</Heading>\n      <Container maxW='container.lg' overflowX='auto' py={4}>\n        <Card maxW='container.lg' mx='auto' mt={40}>\n          {Loader === false && SortArray(Msgg).map((elem) => \n            // <Alert status={(elem.From == currentUser.uid) ? 'success' : 'warning'}><AlertIcon />{elem.Message}</Alert>\n          <Flex>\n            <Avatar size='sm' src={(elem.From == '5JiyEv9ZwQfqh3Y6BVH7EtAufaN2') ? 'https://lh3.googleusercontent.com/a-/AFdZucrdiiwbcviiVAR4JDHCbZYUo0J3F6G2u1gTunMe=s96-c' : 'elem.photoURL'} />\n            <Box display='flex' alignItems='center' ml='3'>\n              <Code fontWeight='bold'>\n              {elem.Message}\n              </Code>\n            </Box>\n          </Flex>\n          )}\n        </Card>\n\n        {/* <Card maxW='container.lg' mx='auto' mt={40}>\n          <Flex>\n            <Avatar size='sm' src={elem.photoURL} />\n            <Box display='flex' alignItems='center' ml='3'>\n              <Code fontWeight='bold'>\n                Segun Adebayo\n              </Code>\n            </Box>\n          </Flex>\n        </Card> */}\n        \n        {/* <Flex>\n          <Avatar src='https://bit.ly/sage-adebayo' />\n          <Box ml='3'>\n            <Text fontWeight='bold'>\n              Segun Adebayo\n              <Badge ml='1' colorScheme='green'>\n                New\n              </Badge>\n            </Text>\n            <Text fontSize='sm'>UI Engineer</Text>\n          </Box>\n        </Flex> */}\n      </Container>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n  useLocation,\n} from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport ForgotPasswordPage from '../pages/ForgotPasswordPage'\nimport Homepage from '../pages/Homepage'\nimport Loginpage from '../pages/Loginpage'\nimport NotfoundPage from '../pages/NotfoundPage'\nimport Profilepage from '../pages/Profilepage'\nimport Registerpage from '../pages/Registerpage'\nimport ResetPasswordPage from '../pages/ResetPasswordPage'\nimport TestPage from '../pages/TestPage'\nimport Chatpage from '../pages/Chatpage'\nimport RTDBpage from '../pages/RTDBpage'\n\nexport default function AppRouter(props) {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={Homepage} />\n          <ProtectedRoute exact path='/login' component={Loginpage} />\n          <ProtectedRoute exact path='/register' component={Registerpage} />\n          <ProtectedRoute exact path='/profile' component={Profilepage} />\n          <ProtectedRoute exact path='/test' component={TestPage} />\n          <ProtectedRoute exact path='/chat' component={Chatpage} />\n          <ProtectedRoute exact path='/RTDB' component={RTDBpage} />\n          <ProtectedRoute\n            exact\n            path='/forgot-password'\n            component={ForgotPasswordPage}\n          />\n          <ProtectedRoute\n            exact\n            path='/reset-password'\n            component={ResetPasswordPage}\n          />\n          <Route exact path='*' component={NotfoundPage} />\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nfunction ProtectedRoute(props) {\n  const { currentUser } = useAuth()\n  const { path } = props\n  console.log('path', path)\n  const location = useLocation()\n  console.log('location state', location.state)\n\n  if (\n    path === '/login' ||\n    path === '/register' ||\n    path === '/forgot-password' ||\n    path === '/reset-password'\n  ) {\n    return currentUser ? (\n      <Redirect to={location.state?.from ?? '/profile'} />\n    ) : (\n      <Route {...props} />\n    )\n  }\n  return currentUser ? (\n    <Route {...props} />\n  ) : (\n    <Redirect\n      to={{\n        pathname: '/login',\n        state: { from: path },\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport AppRouter from './components/AppRouter'\nimport AuthContextProvider from './contexts/AuthContext'\n\nfunction App(props) {\n  return (\n    <AuthContextProvider>\n      <AppRouter />\n    </AuthContextProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { ChakraProvider, ColorModeScript, extendTheme } from '@chakra-ui/react'\n\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\nconst theme = extendTheme({\n  config,\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}